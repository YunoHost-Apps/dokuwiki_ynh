#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
#REMOVEME? ynh_script_progression --message="Loading installation settings..." --weight=2

#REMOVEME? app=$YNH_APP_INSTANCE_NAME

#REMOVEME? domain=$(ynh_app_setting_get --app=$app --key=domain)
#REMOVEME? path=$(ynh_app_setting_get --app=$app --key=path)
#REMOVEME? language=$(ynh_app_setting_get --app=$app --key=language)
#REMOVEME? #REMOVEME? install_dir=$(ynh_app_setting_get --app=$app --key=install_dir)
#REMOVEME? phpversion=$(ynh_app_setting_get --app=$app --key=phpversion)
#REMOVEME? fpm_footprint=$(ynh_app_setting_get --app=$app --key=fpm_footprint)
#REMOVEME? fpm_usage=$(ynh_app_setting_get --app=$app --key=fpm_usage)

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..." --weight=1

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
#REMOVEME? ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=9

# Backup the current version of the app
#REMOVEME? ynh_backup_before_upgrade
#REMOVEME? ynh_clean_setup () {
	# Restore it if the upgrade fails
#REMOVEME? 	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
#REMOVEME? ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# If install_dir doesn't exist, create it
if [ -z "$install_dir" ]; then
#REMOVEME? 	install_dir=/var/www/$app
#REMOVEME? 	ynh_app_setting_set --app=$app --key=install_dir --value=$install_dir
fi

# language default value, if not set
if [ -z "$language" ]; then
	language='en'
	ynh_app_setting_set --app=$app --key=language --value=$language
fi

# If fpm_footprint doesn't exist, create it
if [ -z "$fpm_footprint" ]; then
    fpm_footprint=low
    ynh_app_setting_set --app=$app --key=fpm_footprint --value=$fpm_footprint
fi

# If fpm_usage doesn't exist, create it
if [ -z "$fpm_usage" ]; then
    fpm_usage=low
    ynh_app_setting_set --app=$app --key=fpm_usage --value=$fpm_usage
fi

# If phpversion doesn't exist, create it
if [ -z "$phpversion" ]; then
    phpversion=$YNH_PHP_VERSION
    ynh_app_setting_set --app=$app --key=phpversion --value=$phpversion
fi

# Cleaning legacy permissions
#REMOVEME? admin_user=$(ynh_app_setting_get --app=$app --key=admin)

if [ -n "$admin_user" ]; then
	# Removing skipped/unprotected_uris under certain conditions, remove the visitors group added during the migration process of 3.7
	# Remove skipped_uris. If the app was public, add visitors again to the main permission
	if ynh_permission_has_user --permission=admin --user="$admin_user"
	then
		echo "permission admin already exist. Nothing to do"
	else
#REMOVEME? 		ynh_permission_create --permission "admin" --allowed "$admin_user"
	fi
	# Remove legacy admin setting
	ynh_app_setting_delete --app=$app --key=admin
fi

# Cleaning legacy permissions
#REMOVEME? if ynh_legacy_permissions_exists; then
#REMOVEME? 	ynh_legacy_permissions_delete_all

	ynh_app_setting_delete --app=$app --key=is_public
fi

# Yunohost specific configuration, if it isn't exist already

# Previously, these settings were store in an unique "dokuwiki.php"
# Now, they are split in multiple files to ease upgrading process (separate YunoHost config from user config)

# Loading order of configuration files
#
# By default DokuWiki loads its configuration files in the following order:
#
# 1. conf/dokuwiki.php
# 2. conf/local.php
# 3. conf/local.protected.php
#
# See https://www.dokuwiki.org/plugin:config#protecting_settings

# Configuration dedicated to Yunohost (LDAP and admin mainly)
# Create an empty configuration file if it does not exist
# This file will be overwritten anyway later in the part "# LDAP Configuration"
# The file is created here to prevent a failure of the helper `ynh_backup_if_checksum_is_different`
if [ ! -f "$install_dir/conf/local.protected.php" ]; then
	touch $install_dir/conf/local.protected.php
fi

# Do not overwrite existing dokuwiki configuration as it could have user customization's and settings.
# Create file if it does not exist
if [ ! -f "$install_dir/conf/local.php" ]; then
	# Set the default "language"
	ynh_add_config --template="../conf/local.php" --destination="$install_dir/conf/local.php"
fi

# Do not overwrite existing ACL configuration file as it could have user customization's and settings.
# Create file if it does not exist
# See https://www.dokuwiki.org/acl#background_info
if [ ! -f "$install_dir/conf/acl.auth.php" ]; then
	ynh_add_config --template="../conf/acl.auth.php" --destination="$install_dir/conf/acl.auth.php"
fi

# For securing DokuWiki installation, create default files that will be writable in the "conf" folder.
# Other files will be read ony and owned by root.
# See https://www.dokuwiki.org/install:permissions

# If file does not exists
if [ ! -f "$install_dir/conf/local.php.bak" ]; then
	# if template exists
	if [ -f "$install_dir/conf/local.php.dist" ]; then
		# Copy template to create default file
		cp --archive "$install_dir/conf/local.php.dist" "$install_dir/conf/local.php.bak"
	fi
fi

if [ ! -f "$install_dir/conf/users.auth.php" ]; then
	if [ -f "$install_dir/conf/users.auth.php.dist" ]; then
		cp --archive $install_dir/conf/users.auth.php.dist $install_dir/conf/users.auth.php
	fi
fi

if [ ! -f "$install_dir/conf/plugins.local.php" ]; then
	cp --archive ../conf/plugins.local.php $install_dir/conf
fi

if [ ! -f "$install_dir/conf/plugins.local.php.bak" ]; then
	cp --archive ../conf/plugins.local.php $install_dir/conf/plugins.local.php.bak
fi


if [ ! -f "$install_dir/inc/preload.php" ]; then
	# if template exists
	if [ -f "$install_dir/inc/preload.php.dist" ]; then
		# Copy template to create default file
		cp --archive "$install_dir/inc/preload.php.dist" "$install_dir/inc/preload.php"
	fi
fi

# purge "LOGAUTHERROR PLUGIN" as not compatible and not maintained anymore
# See https://www.dokuwiki.org/plugin:logautherror
if [ -d "$install_dir/lib/plugins/logautherror" ]; then
    ynh_script_progression --message="Purge "LOGAUTHERROR PLUGIN" as not maintained anymore" --weight=1
#REMOVEME?     ynh_secure_remove --file "$install_dir/lib/plugins/logautherror"
fi


#=================================================
# CREATE DEDICATED USER
#=================================================
#REMOVEME? ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

# Create a dedicated user (if not existing)
#REMOVEME? ynh_system_user_create --username=$app --home_dir="$install_dir"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --weight=2

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$install_dir"
fi

chmod 750 "$install_dir"
chmod -R o-rwx "$install_dir"
chown -R $app:www-data "$install_dir"

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
#REMOVEME? ynh_script_progression --message="Upgrading dependencies..." --weight=1

#REMOVEME? ynh_install_app_dependencies $pkg_dependencies

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading PHP-FPM configuration..." --weight=1

# Create a dedicated PHP-FPM config
ynh_add_fpm_config --usage=$fpm_usage --footprint=$fpm_footprint

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=2

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# SPECIFIC UPGRADE
#=================================================
# UPGRADE DOKUWIKI
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
    ynh_script_progression --message="Upgrading DokuWiki..." --weight=7

    # Remove upgrade notification inside Dokuwiki's admin panel
    # See https://www.dokuwiki.org/update_check
    touch $install_dir/doku.php

    # Remove files not used anymore after upgrade
    # See https://www.dokuwiki.org/install:unused_files
    if [ -f "$install_dir/data/deleted.files" ]; then

        # Feed output of grep[...] line by line to 'ynh_secure_remove'
        # 'ynh_secure_remove' can only work file by file. Cannot work with a list
        # This is a (complicated) workaround this limitation
        while IFS= read -r line; do

            # Added this test to reduce the spam printed by helper to the user in the webadmin.
            # Should be less 'scary' to them I think
            #
            # number of messages = number of lines *2    (673 lines while writing this)
            ### grep --extended-regexp --invert-match '^($|#)' data/deleted.files | wc -l
            ### 673
            #
            # Spam sample:
                #Attention : /!\ Packager ! You provided more than one argument to ynh_secure_remove but it will be ignored... Use this helper with one argument at time.
                #Info : 'inc/parser/spamcheck.php' wasn't deleted because it doesn't exist.
                #Attention : /!\ Packager ! You provided more than one argument to ynh_secure_remove but it will be ignored... Use this helper with one argument at time.
                #Attention : /!\ Packager ! You provided more than one argument to ynh_secure_remove but it will be ignored... Use this helper with one argument at time.
                #Info : 'lib/images/favicon.ico' wasn't deleted because it doesn't exist.
                #Info : 'lib/images/thumbup.gif' wasn't deleted because it doesn't exist.
                #Attention : /!\ Packager ! You provided more than one argument to ynh_secure_remove but it will be ignored... Use this helper with one argument at time.
                #Info : 'lib/images/toolbar/code.png' wasn't deleted because it doesn't exist.
                #Attention : /!\ Packager ! You provided more than one argument to ynh_secure_remove but it will be ignored... Use this helper with one argument at time.
                #Info : 'lib/images/toolbar/empty.png' wasn't deleted because it doesn't exist.
            if [ -f "$line" ]; then
                ynh_secure_remove --file "$line"
            fi
        done < <(grep --null --extended-regexp --invert-match '^($|#)' "$install_dir/data/deleted.files" | xargs --null --max-args=1 || true)
        #    ^ ^  First < is redirection, second is process substitution.
        # Source: https://tldp.org/LDP/abs/html/process-sub.html

        # Previous attemps if someone reads this one day
        ###grep --extended-regexp --invert-match '^($|#)' data/deleted.files | xargs --max-args=1 rm --verbose --force --dir 2>&1 || true
        ###grep --extended-regexp --invert-match '^($|#)' data/deleted.files | xargs --max-args=1 ynh_secure_remove --file 2>&1
        
        ###grep --null --extended-regexp --invert-match '^($|#)' data/deleted.files > toto.list
        ###xargs --null --verbose --max-args=1 --arg-file=toto.list ynh_secure_remove 2>&1
fi

    # TODO Taken from old "upgrade" script. Should check if it is needed and what it does
    # Update all plugins
    ###for name_plugin in $(sudo -s cat $install_dir/lib/plugins/*/plugin.info.txt | grep url | awk -F ':' '{print $3}');
    ###do
    ###    # Get a official plugin for dokuwiki, not update a no-official
    ###    wget -nv --quiet "https://github.com/splitbrain/dokuwiki-plugin-$name_plugin/zipball/master" -O "${name_plugin}.zip" -o /dev/null || true
    ###    if [ -s "${name_plugin}.zip" ]; then
    ###        unzip ${name_plugin}.zip
    ###        cp -a splitbrain-dokuwiki-plugin-${name_plugin}*/. "$install_dir/lib/plugins/$name_plugin/"
    ###    fi
    ###done

    # if "file" exists and is executable
    # Stolen from https://github.com/YunoHost-Apps/grav_ynh/blob/testing/scripts/upgrade#L189
    if [ -x "$install_dir/bin/plugin.php" ]; then
        pushd "$install_dir"
            ynh_exec_warn_less ynh_exec_as $app php$phpversion bin/plugin.php --no-colors extension upgrade || ynh_print_warn --message="Automatic plugin upgrade has failed, you can upgrade them from your DokuWiki admin panel."
        popd
    else
        ynh_print_warn --message="Automatic plugin cannot be done, you have to upgrade them from your DokuWiki admin panel."
    fi


fi

#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression --message="Adding a configuration file..." --weight=2

# Customize admin group in case of multiple wiki install managed by different admins
# dokuwiki.admin; dokuwiki__1.admin; etc
ynh_add_config --template="../conf/local.protected.php" --destination="$install_dir/conf/local.protected.php"


#=================================================
# GENERIC FINALIZATION
#=================================================
# UPGRADE FAIL2BAN
#=================================================
ynh_script_progression --message="Reconfiguring Fail2Ban..." --weight=7

# Create a dedicated Fail2Ban config
ynh_add_fail2ban_config --logpath="/var/log/nginx/$domain-error.log" --failregex="^.*authentication failure. while reading response header from upstream, client: <HOST>,.*POST $path.*$" --max_retry=5

#=================================================
# RELOAD NGINX
#=================================================
#REMOVEME? ynh_script_progression --message="Reloading NGINX web server..." --weight=1

#REMOVEME? ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
